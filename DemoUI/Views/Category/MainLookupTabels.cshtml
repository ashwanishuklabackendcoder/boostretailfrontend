@{
    ViewData["Title"] = "Maintain Lookup Tables";
}

<div class="container-fluid px-0">
    <h4 class="fw-bold mb-2">CATEGORIZATION</h4>
    <p class="text-muted">Maintain Lookup Tables</p>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h6 class="mb-0">Create Lookup Tables</h6>
        <button class="btn btn-primary btn-sm btn-add-lookup"><i class="fa fa-plus"></i></button>

    </div>
</div>
<div class="lookup-tables-container">
    <div class="card">
        <div class="card-body p-0">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th class="p-3 sortable">Table Name <i class="fa-solid fa-sort ms-1"></i></th>
                        <th class="p-3">Supplier Feed</th>
                        <th class="p-3 sortable">Columns <i class="fa-solid fa-sort ms-1"></i></th>
                        <th class="p-3 sortable">Categorization <i class="fa-solid fa-sort ms-1"></i></th>
                        <th class="p-3">Active</th>
                        <th class="p-3">Action</th>
                    </tr>
                </thead>
                <tbody id="lookup-table-body">
                    <tr>
                        <td colspan="6" class="text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<!-- New Lookup Table Modal -->
<div class="modal fade" id="lookupModal" tabindex="-1" aria-labelledby="lookupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-4 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="lookupModalLabel">New Lookup Table</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Table Name:</label>
                    <input type="text" id="tableName" class="form-control" placeholder="Enter Table Name">
                </div>

                <div class="mb-3">
                    <label class="form-label">Supplier Feed:</label>
                    <select id="supplierFeed" class="form-select">
                        <option value="">Choose Supplier Feed...</option>
                        <option value="0">Cannondale</option>
                        <option value="1">Cube</option>
                        <option value="2">Frog</option>
                        <option value="3">Giant</option>
                        <option value="4">Haibike</option>
                        <option value="5">Lapierre</option>
                        <option value="6">Liv</option>
                        <option value="7">Marin</option>
                        <option value="8">Merida</option>
                        <option value="9">Orbea</option>
                        <option value="10">Raleigh</option>
                        <option value="11">Specialized</option>
                        <option value="12">Tern</option>
                        <option value="13">Trek</option>
                        <option value="14">Whyte</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Categorisation:</label>
                    <select id="categorisation" class="form-select">
                        <option value="">Select Categories...</option>
                        <option value="Categories">Categories</option>
                        <option value="Search 1/2">Search 1/2</option>
                    </select>
                </div>

                <!-- Dynamic columns section -->
                <div class="mb-3">
                    <label class="form-label">Columns:</label>
                    <div id="columnsContainer" class="border rounded p-2" style="max-height:200px; overflow:auto;">
                        <p class="text-muted small">Select supplier first to load columns...</p>
                    </div>
                </div>
            </div>

            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="btnCreateLookup" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const apiLookupUrl = "https://simapi.runasp.net/api/Category/GetCategoryLookups";
            const apiCreateUrl = "https://simapi.runasp.net/api/Category/AddCategoryLookupAsync";
            const apiUpdateUrl = "https://simapi.runasp.net/api/Category/UpdateCategoryLookupAsync";
            const apiDeleteUrl = "https://simapi.runasp.net/api/Category/DeleteCategoryLookupAsync";
            const apiColumnsUrl = "https://simapi.runasp.net/api/Category/GetSupplierColumns";
            const tableBody = $('#lookup-table-body');

            let editId = null;

            // ======================
            // LOAD LOOKUP TABLES
            // ======================
            function loadLookupTables() {
                fetch(apiLookupUrl)
                    .then(res => res.json())
                    .then(data => {
                        tableBody.empty();
                        if (!data || data.length === 0) {
                            tableBody.html('<tr><td colspan="6" class="text-center p-4">No lookup tables found.</td></tr>');
                            return;
                        }

                        data.forEach(item => {
                            const supplierDisplay = getSupplierNameFromValue(item.supplierFeed);
                            tableBody.append(`
                                <tr data-id="${item.id}">
                                    <td class="p-3">${item.tableName}</td>
                                    <td class="p-3">${supplierDisplay}</td>
                                    <td class="p-3">${item.supplierColumns}</td>
                                    <td class="p-3">${item.categorisation}</td>
                                    <td class="p-3">
                                        <input class="form-check-input isActiveCheckbox" type="checkbox" ${item.isActive ? 'checked' : ''} disabled>
                                    </td>
                                    <td class="p-3">
                                        <a href="#" class="edit-lookup" title="Edit"><i class="fa-solid fa-pen"></i></a>
                                        <a href="#" class="delete-lookup ms-2" title="Delete"><i class="fa-solid fa-trash-can"></i></a>
                                    </td>
                                </tr>
                            `);
                        });
                    })
                    .catch(() => {
                        tableBody.html('<tr><td colspan="6" class="text-center text-danger p-4">Failed to load data.</td></tr>');
                    });
            }

            loadLookupTables();

            // ======================
            // OPEN MODAL FOR CREATE
            // ======================
            $('.btn-add-lookup').on('click', function () {
                editId = null;
                $('#lookupModalLabel').text('New Lookup Table');
                $('#btnCreateLookup').text('Create Lookup');
                resetModal();
                $('#lookupModal').modal('show');
            });

            function resetModal() {
                $('#tableName').val('');
                $('#supplierFeed').val('');
                $('#categorisation').val('');
                $('#columnsContainer').html('<p class="text-muted small">Select supplier first to load columns...</p>');
                $('#btnCreateLookup').prop('disabled', false);
            }

            // ======================
            // LOAD SUPPLIER COLUMNS
            // ======================
            $('#supplierFeed').on('change', function () {
                const supplierId = $(this).val();
                const container = $('#columnsContainer');
                container.html('<p class="text-muted small">Loading columns...</p>');

                if (!supplierId) {
                    container.html('<p class="text-muted small">Select supplier first to load columns...</p>');
                    return;
                }

                fetch(`${apiColumnsUrl}?supplier=${supplierId}`)
                    .then(res => res.json())
                    .then(columns => {
                        if (!columns || columns.length === 0) {
                            container.html('<p class="text-muted small text-danger">No columns found for this supplier.</p>');
                            return;
                        }

                        let html = `
                            <div class="form-check mb-2">
                                <input type="checkbox" id="selectAllCols" class="form-check-input">
                                <label for="selectAllCols" class="form-check-label fw-bold">Select All</label>
                            </div>
                        `;

                        columns.forEach(col => {
                            html += `
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input column-check" value="${col}">
                                    <label class="form-check-label">${col}</label>
                                </div>`;
                        });

                        container.html(html);

                        $('#selectAllCols').on('change', function () {
                            container.find('.column-check').prop('checked', this.checked);
                        });

                        // ✅ Pre-select columns in edit mode
                        if (editId && Array.isArray(window.editSelectedColumns)) {
                            setTimeout(() => {
                                container.find('.column-check').each(function () {
                                    if (window.editSelectedColumns.includes($(this).val())) {
                                        $(this).prop('checked', true);
                                    }
                                });
                            }, 50);
                        }
                    })
                    .catch(() => {
                        container.html('<p class="text-danger small">Error loading columns.</p>');
                    });
            });

            // ======================
            // CREATE OR UPDATE LOOKUP TABLE
            // ======================
            $('#btnCreateLookup').on('click', function () {
                debugger;
                const tableName = $('#tableName').val()?.trim();
                const supplierFeed = $('#supplierFeed').val();
                const categorisation = $('#categorisation').val();
                const selectedColumns = $('#lookupModal .column-check:checked').map(function () {
                    return $(this).val();
                }).get();
                const isActive = $('#lookupModal .isActiveCheckbox').prop('checked') || true;

                if (!tableName || !supplierFeed || !categorisation || selectedColumns.length === 0) {
                    alert('⚠️ Please fill all required fields.');
                    return;
                }

                const payload = {
                    id: editId || 0,
                    tableName,
                    supplierFeed: parseInt(supplierFeed),
                    categorisation,
                    supplierColumns: selectedColumns.join(', '),
                    isActive
                };

                const url = editId ? `${apiUpdateUrl}/${editId}` : apiCreateUrl;
                const method = editId ? "PUT" : "POST";
                $('#btnCreateLookup').prop('disabled', true).text(editId ? 'Saving...' : 'Creating...');

                fetch(url, {
                    method: method,
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                })
                    .then(res => {
                        if (!res.ok) throw new Error(editId ? "Failed to update" : "Failed to create");
                        return res.json();
                    })
                    .then(() => {
                        $('#lookupModal').modal('hide');
                        loadLookupTables();
                    })
                    .catch(err => {
                        console.error(err);
                        alert(err.message);
                    })
                    .finally(() => {
                        $('#btnCreateLookup').prop('disabled', false).text(editId ? 'Save Changes' : 'Create Lookup');
                    });
            });

            // ======================
            // EDIT LOOKUP TABLE
            // ======================
            $(document).on('click', '.edit-lookup', function (e) {
                e.preventDefault();
                const row = $(this).closest('tr');
                editId = row.data('id');

                $('#lookupModalLabel').text('Edit Lookup Table');
                $('#btnCreateLookup').text('Save Changes');

                $('#tableName').val(row.find('td:nth-child(1)').text().trim());
                $('#categorisation').val(row.find('td:nth-child(4)').text().trim());

                window.editSelectedColumns = row.find('td:nth-child(3)').text().split(',').map(c => c.trim()).filter(Boolean);

                const supplierText = row.find('td:nth-child(2)').text().trim();
                const supplierValue = getSupplierFeedValue(supplierText);

                $('#lookupModal').modal('show');

                $('#lookupModal').off('shown.bs.modal').on('shown.bs.modal', function () {
                    if (supplierValue) {
                        $('#supplierFeed').val(supplierValue).trigger('change');
                    } else {
                        $('#supplierFeed').val('').trigger('change');
                    }
                });
            });

            // ======================
            // DELETE LOOKUP TABLE
            // ======================
            $(document).on('click', '.delete-lookup', function (e) {
                e.preventDefault();
                const row = $(this).closest('tr');
                const id = row.data('id');

                if (!confirm('Are you sure you want to delete this lookup table?')) return;

                fetch(`${apiDeleteUrl}/${id}`, { method: "DELETE" })
                    .then(res => {
                        if (!res.ok) throw new Error("Failed to delete");
                        loadLookupTables();
                    })
                    .catch(err => {
                        console.error(err);
                        alert(err.message);
                    });
            });
        });

        // ======================
        // HELPER FUNCTIONS
        // ======================
        const supplierMapping = {
            "Cannondale": "0",
            "Cube": "1",
            "Frog": "2",
            "Giant": "3",
            "Haibike": "4",
            "Lapierre": "5",
            "Liv": "6",
            "Marin": "7",
            "Merida": "8",
            "Orbea": "9",
            "Raleigh": "10",
            "Specialized": "11",
            "Tern": "12",
            "Trek": "13",
            "Whyte": "14"
        };

        function getSupplierNameFromValue(val) {
            if (val === null || val === undefined) return '';
            const s = String(val).trim();
            const rev = Object.fromEntries(Object.entries(supplierMapping).map(([k, v]) => [v, k]));
            return rev[s] ?? s;
        }

        function getSupplierFeedValue(input) {
            const t = (input ?? '').toString().trim();
            if (!t) return '';

            const rev = Object.fromEntries(Object.entries(supplierMapping).map(([k, v]) => [v, k]));

            if (/^\d+$/.test(t)) return t;

            const direct = Object.keys(supplierMapping).find(k => k.toLowerCase() === t.toLowerCase());
            if (direct) return supplierMapping[direct];

            const numMatch = t.match(/\d+/);
            if (numMatch) return numMatch[0];

            const contains = Object.keys(supplierMapping).find(k => t.toLowerCase().includes(k.toLowerCase()));
            if (contains) return supplierMapping[contains];

            return '';
        }
    </script>
}





